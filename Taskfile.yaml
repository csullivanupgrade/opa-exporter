version: '3'

env:
  CONTEXT: docker-desktop
  NAMESPACE: gatekeeper
  NAMESPACE_PROMETHEUS: prometheus
  NAMESPACE_TEST: test

vars:
  BIN_NAME: tmp/opa-scorecard
  CWD:
    sh: pwd
  TMP_DIR: "{{ .CWD }}/tmp"

tasks:
  default:
    desc: Describe available tasks.
    cmds:
    - task --list-all

  req:
    desc: Test that prerequisite tools have been installed.
    cmds:
    - jq --version
    - kubectx --help
    - docker version
    - kubectl version
    - helm version

  namespace:
    desc: Switch to a namespace in the local context ($CONTEXT). Create it if necessary.
    cmds:
    - |
      kubectl --context $CONTEXT get namespaces {{ .NAMESPACE }} || \
      kubectl --context $CONTEXT create namespace {{ .NAMESPACE }}
    - kubectx $CONTEXT
    - kubens {{ .NAMESPACE }}

  nuke:
    desc: Teardown the environment.
    deps:
    - task: namespace
    cmds:
    - task: gatekeeper-delete
    - kubectx $CONTEXT
    - kubectl --context $CONTEXT delete --ignore-not-found namespace $NAMESPACE
    - kubectl --context $CONTEXT delete --ignore-not-found namespace $NAMESPACE_PROMETHEUS
    - kubectl --context $CONTEXT delete --ignore-not-found namespace $NAMESPACE_TEST

  clean:
    desc: Remove temporary local artifacts.
    cmds:
    - test -n {{ .TMP_DIR }}
    - rm -rf {{ .TMP_DIR }}

  build:
    desc: Build the binary.
    cmds:
    - go build -o {{ .BIN_NAME }} main.go
    env:
      GOOS: "{{ OS }}"
      CGO_ENABLED: "0"
      GOARCH: "{{ ARCH }}"
    sources:
    - main.go
    - pkg
    - go.mod
    - go.sum
    generates:
    - "{{ .BIN_NAME }}"

  test:
    desc: Run tests.
    cmds:
    - go test ./... -v -short {{ .CLI_ARGS }}
    sources:
    - main.go
    - pkg
    - go.mod
    - go.sum

  lint:
    desc: Run the linter.
    cmds:
    - golangci-lint run ./... --timeout {{ .TIMEOUT }} {{ .CLI_ARGS }}
    vars:
      TIMEOUT: 1m
    sources:
    - main.go
    - pkg
    - .golangci.yaml

  tidy:
    desc: Tidy up go deps.
    cmds:
    - go mod tidy

  fmt:
    desc: Autoformat go files.
    cmds:
    - gofmt -s -w .

  manifests:
    desc: Copy manifests for deployment to a local cluster.
    cmds:
    - mkdir -p {{ .TMP_DIR }}/manifests
    - cp demo/manifests/* {{ .TMP_DIR }}/manifests
    sources:
    - demo/manifests/*
    generates:
    - "{{ .TMP_DIR }}/manifests/*"

  docker-build:
    desc: Build the docker image and generate a unique tag to force redeployment.
    cmds:
    - docker build --tag opa-scorecard:local --progress plain .
    sources:
    - Dockerfile
    - main.go
    - pkg
    - go.mod
    - go.sum

  log:
    cmds:
    - kubectl --context $CONTEXT logs --follow --selector app=merge-bot-primary

  deploy:
    desc: Deploy the exporter into the cluster specified by $CONTEXT.
    deps:
    - task: manifests
    - task: namespace
    cmds:
    - |
      REPLACEMENT_MANIFEST=$(sed 's/image: .*/image: {{ .DIGEST }}/' {{ .DEPLOYMENT_MANIFEST }})
      echo "$REPLACEMENT_MANIFEST" > {{ .DEPLOYMENT_MANIFEST }}
    - |
      REPLACEMENT_MANIFEST=$(sed 's/namespace: .*/namespace: {{ .NAMESPACE }}/' {{ .BINDING_MANIFEST }})
      echo "$REPLACEMENT_MANIFEST" > {{ .BINDING_MANIFEST }}
    - kubectl --context $CONTEXT apply --filename {{ .TMP_DIR }}/manifests
    vars:
      BINDING_MANIFEST: "{{ .TMP_DIR }}/manifests/clusterrolebinding.yaml"
      DEPLOYMENT_MANIFEST: "{{ .TMP_DIR }}/manifests/deployment.yaml"
      DIGEST:
        sh: |
          docker inspect opa-scorecard:local | jq -r '.[0].Id'

  helm-repo:
    desc: Pull in necessary helm repo for gatekeeper.
    cmds:
    - helm repo add {{ .NAME }} {{ .URL }}
    - helm repo update {{ .NAME }}

  gatekeeper-template:
    desc: Do not invoke directly. Provide the base template and invoke it with a variable kubectl command.
    deps:
    - task: helm-repo
      vars:
        NAME: gatekeeper
        URL: https://open-policy-agent.github.io/gatekeeper/charts
    - task: namespace
    cmds:
    - mkdir -p {{ .TMP_DIR }}
    - |
      helm template gatekeeper/gatekeeper  \
        --name-template=gatekeeper \
        --namespace $NAMESPACE --create-namespace \
        --set controllerManager.dnsPolicy=ClusterFirst,audit.dnsPolicy=ClusterFirst \
        --set logDenies=true \
        --set disableMutation=true \
        --set psp.enabled=false \
        --set rbac.Create=true \
        --set replicas=1 \
      > {{ .TMP_DIR }}/gatekeeper.yaml
    - kubectl --context $CONTEXT {{ .ACTION }} --filename {{ .TMP_DIR }}/gatekeeper.yaml
    generates:
    - "{{ .TMP_DIR }}/gatekeeper.yaml"

  gatekeeper-deploy:
    desc: Deploy gatekeeper to your local cluster. Automatically pull in necessary helm repo.
    cmds:
    - task: gatekeeper-template
      vars:
        ACTION: apply

  gatekeeper-delete:
    desc: Remove gatekeeper from your local cluster.
    cmds:
    - task: gatekeeper-template
      vars:
        ACTION: delete --ignore-not-found

  prom-config-deploy:
    desc: Add the grafana dashboard config.
    deps:
    - task: namespace
      vars:
        NAMESPACE: "{{ .NAMESPACE_PROMETHEUS }}"
    cmds:
    - kubectl create configmap opa-dashboard --from-file=demo/grafana-opa-dashboard.json
    - kubectl label configmap opa-dashboard grafana_dashboard="1"

  prom-config-delete:
    desc: Add the grafana dashboard config.
    deps:
    - task: namespace
      vars:
        NAMESPACE: "{{ .NAMESPACE_PROMETHEUS }}"
    cmds:
    - kubectl --context $CONTEXT delete --ignore-not-found configmap opa-dashboard

  prom-deploy:
    desc: Deploy prometheus to your local cluster. Automatically pull in necessary helm repo.
    cmds:
    - task: prom-config-deploy
    - task: namespace
      vars:
        NAMESPACE: "{{ .NAMESPACE_PROMETHEUS }}"
    - task: helm-repo
      vars:
        NAME: prometheus-community
        URL: https://prometheus-community.github.io/helm-charts
    - |
      helm upgrade prometheus prometheus-community/kube-prometheus-stack \
        --atomic \
        --install \
        --values demo/prom-values.yaml

  prom-delete:
    desc: Remove prometheus from your local cluster.
    deps:
    - task: namespace
      vars:
        NAMESPACE: "{{ .NAMESPACE_PROMETHEUS }}"
    cmds:
    - |
      helm uninstall \
        prometheus \
        --namespace {{ .NAMESPACE_PROMETHEUS }} \
        --wait
    - kubectl delete --ignore-not-found crd alertmanagerconfigs.monitoring.coreos.com
    - kubectl delete --ignore-not-found crd alertmanagers.monitoring.coreos.com
    - kubectl delete --ignore-not-found crd podmonitors.monitoring.coreos.com
    - kubectl delete --ignore-not-found crd probes.monitoring.coreos.com
    - kubectl delete --ignore-not-found crd prometheuses.monitoring.coreos.com
    - kubectl delete --ignore-not-found crd prometheusrules.monitoring.coreos.com
    - kubectl delete --ignore-not-found crd servicemonitors.monitoring.coreos.com
    - kubectl delete --ignore-not-found crd thanosrulers.monitoring.coreos.com
    - kubectl delete --ignore-not-found clusterrolebindings prometheus-grafana-clusterrolebinding
    - kubectl delete --ignore-not-found clusterrolebindings prometheus-kube-prometheus-admission
    - kubectl delete --ignore-not-found clusterrolebindings prometheus-kube-prometheus-operator
    - kubectl delete --ignore-not-found clusterrolebindings prometheus-kube-prometheus-prometheus
    - kubectl delete --ignore-not-found clusterrolebindings prometheus-kube-state-metrics
    - kubectl delete --ignore-not-found clusterrole prometheus-grafana-clusterrole
    - kubectl delete --ignore-not-found clusterrole prometheus-kube-prometheus-admission
    - kubectl delete --ignore-not-found clusterrole prometheus-kube-prometheus-operator
    - kubectl delete --ignore-not-found clusterrole prometheus-kube-prometheus-prometheus
    - kubectl delete --ignore-not-found clusterrole prometheus-kube-state-metrics
    - kubectl delete --ignore-not-found --namespace kube-system service prometheus-kube-prometheus-coredns
    - kubectl delete --ignore-not-found --namespace kube-system service prometheus-kube-prometheus-kube-controller-manager
    - kubectl delete --ignore-not-found --namespace kube-system service prometheus-kube-prometheus-kube-etcd
    - kubectl delete --ignore-not-found --namespace kube-system service prometheus-kube-prometheus-kube-proxy
    - kubectl delete --ignore-not-found --namespace kube-system service prometheus-kube-prometheus-kube-scheduler
    - kubectl delete --ignore-not-found mutatingwebhookconfigurations prometheus-kube-prometheus-admission
    - kubectl delete --ignore-not-found validatingwebhookconfigurations prometheus-kube-prometheus-admission
    - task: prom-config-delete

  grafana-forward:
    desc: Forward grafana's port so that it can be accessed at http://localhost:3000
    silent: true
    deps:
    - task: namespace
      vars:
        NAMESPACE: "{{ .NAMESPACE_PROMETHEUS }}"
    cmds:
    - |
      echo ----------
      echo -n 'User: '
      kubectl get secrets prometheus-grafana --output jsonpath='{.data.admin-user}' | base64 -d
      echo ''
    - |
      echo -n 'Password: '
      kubectl get secrets prometheus-grafana --output jsonpath='{.data.admin-password}' | base64 -d
      echo ''
      echo ----------
    - kubectl port-forward {{ .GRAFANA_POD }} 3000:3000
    vars:
      GRAFANA_POD:
        sh: kubectl get pod --selector app.kubernetes.io/name=grafana --output name | cut -d/ -f2
